from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def create_reply_menu_keyboard():
    menu_button = KeyboardButton(text="üìã –ú–µ–Ω—é")
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[[menu_button]],
        resize_keyboard=True
    )
    return reply_keyboard


def create_inline_main_menu():
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="add_track")],
        [InlineKeyboardButton(text="üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫", callback_data="tracking_view")],  # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏", callback_data="management_view")],  # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç
        [InlineKeyboardButton(text="üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞", callback_data="address_instructions")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/IceCargoProxyBot")]
    ])
    return menu_keyboard


def create_menu_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def create_contact_keyboard():
    contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="edit_contact_info")],
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])
    return contact_keyboard


def create_track_added_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", callback_data="add_track")],
        [InlineKeyboardButton(text="üîç –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤", callback_data="tracking_view")],
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


def create_settings_keyboard():
    settings_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="show_contact_info")],
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])
    return settings_keyboard


def create_city_keyboard():
    city_keyboard = InlineKeyboardBuilder()
    city_keyboard.add(InlineKeyboardButton(text="–ê—Å—Ç–∞–Ω–∞", callback_data="city_astana"))
    # city_keyboard.add(InlineKeyboardButton(text="–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", callback_data="city_karaganda"))
    return city_keyboard.as_markup()


def create_pickup_keyboard(city):
    pickup_keyboard = InlineKeyboardBuilder()
    if city == 'astana':
        pickup_keyboard.add(InlineKeyboardButton(text="–ü–í –ê—Å—Ç–∞–Ω–∞-–ï—Å–∏–ª—å", callback_data="pv_astana_1"))
        pickup_keyboard.add(InlineKeyboardButton(text="–ü–í –ê—Å—Ç–∞–Ω–∞-–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π", callback_data="pv_astana_2"))
    # elif city == 'karaganda':
    #     pickup_keyboard.add(InlineKeyboardButton(text="–ü–í –ö–∞—Ä–∞–≥–∞–Ω–¥–∞ ‚Ññ1", callback_data="pv_karaganda_1"))
        # pickup_keyboard.add(InlineKeyboardButton(text="–ü–í –ö–∞—Ä–∞–≥–∞–Ω–¥–∞ ‚Ññ2", callback_data="pv_karaganda_2"))
    pickup_keyboard.adjust(1)
    return pickup_keyboard.as_markup()


# def create_track_keyboard(track_data, update_name=None):
#     """
#     –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏.
#     track_data - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∏–¥–∞ (track_number, track_name).
#     update_name - —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è, —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è.
#     """
#     track_keyboard = InlineKeyboardBuilder()
#
#     for track_number, track_name in track_data:
#         if track_number:
#             # –ò—Å–ø–æ–ª—å–∑—É–µ–º track_name –∏–ª–∏ track_number, –µ—Å–ª–∏ track_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
#             track_name = track_name or track_number
#             track_keyboard.row(InlineKeyboardButton(
#                 text=track_name,
#                 callback_data=f"backtrack_{track_number}"),
#                 width=1)
#     if update_name:
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
#         track_keyboard.row(
#             InlineKeyboardButton(
#                 text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞",
#                 callback_data=f"change_track_name_{update_name}"
#             ),
#             width=1
#         )
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
#         track_keyboard.row(
#             InlineKeyboardButton(
#                 text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
#                 callback_data=f"edit_track_{update_name}"
#             ),
#             width=1
#         )
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
#         track_keyboard.row(
#             InlineKeyboardButton(
#                 text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
#                 callback_data=f"delete_track_{update_name}"
#             ),
#             width=1
#         )
#     track_keyboard.row(InlineKeyboardButton(
#         text="üîç –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤",
#         callback_data="find_package"),
#         width=1)
#     track_keyboard.row(InlineKeyboardButton(
#         text="üìÑ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
#         callback_data="add_track"),
#         width=1)
#     track_keyboard.row(InlineKeyboardButton(
#         text="üìã –ú–µ–Ω—é",
#         callback_data="main_menu"),
#         width=1)
#
#     return track_keyboard.as_markup()


def create_tracking_keyboard(track_data):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏, –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    tracking_keyboard = InlineKeyboardBuilder()

    for track_number, track_name in track_data:
        if track_number:
            track_name = track_name or track_number
            tracking_keyboard.row(
                InlineKeyboardButton(
                    text=track_name,
                    callback_data=f"backtrack_{track_number}"  # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç `show_alert`
                ),
                width=1
            )

    tracking_keyboard.row(
        InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu"),
        width=1
    )

    return tracking_keyboard.as_markup()


def create_management_keyboard(track_data):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∫–Ω–æ–ø–∫–∏ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    management_keyboard = InlineKeyboardBuilder()

    for track_number, track_name in track_data:
        if track_number:
            track_name = track_name or track_number
            management_keyboard.row(
                InlineKeyboardButton(
                    text=track_name,
                    callback_data=f"manage_single_track_{track_number}"  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                ),
                width=1
            )

    management_keyboard.row(
        InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu"),
        width=1
    )
    return management_keyboard.as_markup()


def create_single_track_management_keyboard(track_number, track_name):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.
    """
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(
            text=f"{track_name}",
            callback_data="none"  # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
        ),
        width=1
    )

    keyboard.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=f"change_track_name_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
            callback_data=f"edit_track_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
            callback_data=f"delete_track_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="management_view"
        ),
        width=1
    )

    return keyboard.as_markup()


async def update_keyboard(callback: CallbackQuery, new_markup: InlineKeyboardMarkup):
    current_markup = callback.message.reply_markup
    if current_markup != new_markup:
        await callback.message.edit_reply_markup(reply_markup=new_markup)


def create_yes_no_keyboard(yes_cb, no_cb):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data=yes_cb),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data=no_cb)
        ]
    ])
    return keyboard


def create_support_keyboard():
    support_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/IceCargoProxyBot")]
    ])
    return support_keyboard
