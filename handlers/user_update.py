import logging
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from db_management import update_client_data, get_client_by_chat_id, get_chat_id_by_phone
from handlers.menu_handling import show_inline_menu
from functions import transliterate, format_phone, validate_phone, generate_address_instructions
from keyboards import create_inline_main_menu, create_city_keyboard, create_pickup_keyboard, create_menu_button
from bitrix_integration import update_contact
from states import Upd
from handlers.utils import send_and_delete_previous


router = Router()


def register_handlers(router_object):
    router_object.message.register(process_update_name, Upd.name)
    router_object.message.register(process_update_phone, Upd.phone)
    router_object.callback_query.register(process_update_city, Upd.city)
    router_object.callback_query.register(process_update_pickup, Upd.pickup_point)


@router.message(Upd.name)
async def process_update_name(message: Message, state: FSMContext):
    if message.text == "üìã –ú–µ–Ω—é":
        await show_inline_menu(message, state)
        return

    await state.update_data(name_cyrillic=message.text.title())
    translit_name = transliterate(message.text)
    await state.update_data(name_translit=translit_name)
    chat_id = message.chat.id
    await state.update_data(chat_id=chat_id)
    await send_and_delete_previous(
        message,
        "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8xxxxxxxxxx",
        reply_markup=create_menu_button(),
        state=state
    )
    await state.set_state(Upd.phone)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: phone")


@router.message(Upd.phone)
async def process_update_phone(message: Message, state: FSMContext):
    if message.text == "üìã –ú–µ–Ω—é":
        await show_inline_menu(message, state)
        return

    phone = format_phone(message.text)
    if validate_phone(phone):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_chat_id = get_chat_id_by_phone(phone)
        if existing_chat_id and existing_chat_id != message.chat.id:
            await send_and_delete_previous(
                message,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
                state=state
            )
            return

        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(phone=phone)
        await send_and_delete_previous(
            message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞",
            reply_markup=create_city_keyboard(),
            state=state
        )
        await state.set_state(Upd.city)
        logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: city")
    else:
        await send_and_delete_previous(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8xxxxxxxxxx",
            state=state
        )


@router.callback_query(Upd.city)
async def process_update_city(callback: CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":
        await show_inline_menu(callback.message, state)
        return

    city = callback.data.split('_')[1]
    await state.update_data(city=city)
    await send_and_delete_previous(
        callback.message,
        "–û—Ç–∫—É–¥–∞ –í–∞–º —É–¥–æ–±–Ω–µ–µ –∑–∞–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä?",
        reply_markup=create_pickup_keyboard(city),
        state=state
    )
    await state.set_state(Upd.pickup_point)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: pickup_point")


@router.callback_query(Upd.pickup_point)
async def process_update_pickup(callback: CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":
        await show_inline_menu(callback.message, state)
        return

    pickup_point = callback.data
    await state.update_data(pickup_point=pickup_point)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: pickup_point")

    chat_id = callback.message.chat.id
    user_data = await state.get_data()
    name_cyrillic = user_data.get('name_cyrillic')
    name_translit = user_data.get('name_translit')
    phone = user_data.get('phone')
    city = user_data.get('city')
    old_client_data = get_client_by_chat_id(chat_id)
    personal_code = old_client_data.get('personal_code')
    contact_id = str(old_client_data["contact_id"])

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    update_contact(contact_id, name_translit, personal_code, phone, city, pickup_point)
    await state.update_data(contact_id=contact_id)
    update_client_data(
        chat_id=chat_id,
        contact_id=contact_id,
        personal_code=personal_code,
        name_cyrillic=name_cyrillic,
        name_translit=name_translit,
        phone=phone,
        city=city,
        pickup_point=pickup_point
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instruction_message = generate_address_instructions(
        name_cyrillic=name_cyrillic,
        personal_code=personal_code,
        name_translit=name_translit,
        pickup_point_code=pickup_point
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_message = await callback.message.answer(instruction_message, reply_markup=create_inline_main_menu(), parse_mode="MarkdownV2")

    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_info = await callback.message.bot.get_chat(callback.message.chat.id)
        if chat_info.pinned_message:
            await callback.message.bot.unpin_all_chat_messages(chat_id=callback.message.chat.id)
        await callback.message.bot.pin_chat_message(chat_id=callback.message.chat.id, message_id=sent_message.message_id)
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
