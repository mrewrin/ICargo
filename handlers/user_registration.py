import logging
import time
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from db_management import save_client_data, check_chat_id_exists, generate_unique_code
from handlers.menu_handling import show_inline_menu
from functions import transliterate, format_phone, validate_phone
from keyboards import create_inline_main_menu, create_city_keyboard, create_pickup_keyboard, create_yes_no_keyboard
from bitrix_integration import create_contact
from states import Reg


router = Router()


def register_handlers(router_object):
    router_object.message.register(send_welcome, Command("start"))
    router_object.message.register(process_name, Reg.name)
    router_object.message.register(process_phone, Reg.phone)
    router_object.callback_query.register(process_city, Reg.city)
    router_object.callback_query.register(process_pickup, Reg.pickup_point)


@router.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext):
    await state.clear()

    chat_id = message.chat.id
    if check_chat_id_exists(chat_id):
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n"
            "–ö–æ–Ω—Ç–∞–∫—Ç —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. \n "
            "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=create_yes_no_keyboard("edit_contact_info", "main_menu")
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ ICE Cargo. –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –∫–æ–¥."
        )
        time.sleep(2)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –∏–º—è —Å—é–¥–∞ –≤ —á–∞—Ç: ")
        await state.set_state(Reg.name)


@router.message(Reg.name)
async def process_name(message: Message, state: FSMContext):
    if message.text.replace(' ', '').isalpha():
        await state.update_data(name_cyrillic=message.text.title())
        translit_name = transliterate(message.text)
        await state.update_data(name_translit=translit_name)
        chat_id = message.chat.id
        await state.update_data(chat_id=chat_id)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è: {message.text}, translit: {translit_name}")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx")
        await state.set_state(Reg.phone)
        logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: phone")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")


@router.message(Reg.phone)
async def process_phone(message: Message, state: FSMContext):
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    if message.text == "üìã –ú–µ–Ω—é":
        await show_inline_menu(message, state)
        return

    phone = message.text
    phone = format_phone(phone)
    if validate_phone(phone):
        await state.update_data(phone=phone)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞",
            reply_markup=create_city_keyboard()
        )
        await state.set_state(Reg.city)
        logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: city")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx")


@router.callback_query(Reg.city)
async def process_city(callback: CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":
        await show_inline_menu(callback.message, state)
        return
    # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ –≤—ã–∑–≤–∞–Ω–æ
    city = callback.data.split('_')[1]
    await state.update_data(city=city)
    new_markup = create_pickup_keyboard(city)
    await callback.message.answer("–û—Ç–∫—É–¥–∞ –í–∞–º —É–¥–æ–±–Ω–µ–µ –∑–∞–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä?", reply_markup=new_markup)
    await state.set_state(Reg.pickup_point)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: pickup_point")


@router.callback_query(Reg.pickup_point)
async def process_pickup(callback: CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":
        await show_inline_menu(callback.message, state)
        return
    pickup_point = callback.data
    await state.update_data(pickup_point=pickup_point)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: pickup_point")
    chat_id = callback.message.chat.id
    user_data = await state.get_data()
    name_cyrillic = user_data.get('name_cyrillic')
    name_translit = user_data.get('name_translit')
    phone = user_data.get('phone')
    city = user_data.get('city')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    personal_code = generate_unique_code()

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_id = create_contact(name_translit, personal_code, phone, city)
    await state.update_data(contact_id=contact_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    save_client_data(
        chat_id=chat_id,
        contact_id=contact_id,
        personal_code=personal_code,
        name_cyrillic=name_cyrillic,
        name_translit=name_translit,
        phone=phone,
        city=city,
        pickup_point=pickup_point
    )

    if contact_id:
        final_message = (
            f"üôè –°–ø–∞—Å–∏–±–æ, {user_data['name_cyrillic']}!\n\n"
            f"üìå –í–∞—à –∫–æ–¥: ËÆ†AUG{personal_code}\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º personal_code –≤–º–µ—Å—Ç–æ contact_id
            f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n"
            f"1) ËÆ†AUG{personal_code}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º personal_code –≤–º–µ—Å—Ç–æ contact_id
            f"2) 18957788787\n"
            f"3) ÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏Ç\n"
            f"4) Á¶èÁî∞Ë°óÈÅì ÈæôÂ≤óË∑Ø‰∏ÄË°ó6Âè∑ 8787Â∫ìÊàø\n"
            f"({personal_code}_{user_data['name_translit']}_"
            f"{pickup_point.upper()})\n\n"
            f"‚ùó 3 –ø—É–Ω–∫—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å.\n\n"
            f"üëá –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: —Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞\n"
        )
        sent_message = await callback.message.answer(final_message,
                                                     reply_markup=create_inline_main_menu())
        logging.info(sent_message)
        try:
            await callback.message.bot.pin_chat_message(chat_id=callback.message.chat.id,
                                                        message_id=sent_message.message_id)
            # logging.info(callback.message.chat.id, sent_message.message_id)
            await state.clear()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
