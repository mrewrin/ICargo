import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from db_management import get_client_by_chat_id
from bitrix_integration import get_latest_deal_info
from keyboards import create_menu_button


router = Router()


def register_instructions_handlers(router_object):
    router_object.callback_query.register(process_create_instructions, F.data.in_({"address_instructions"}))


@router.callback_query(F.data.in_({"address_instructions"}))
async def process_create_instructions(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    logging.info('process_create_instructions called')
    chat_id = callback.message.chat.id
    logging.info(f'{chat_id}')

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user_data = get_client_by_chat_id(chat_id)
    contact_id = user_data.get('contact_id')
    personal_code = user_data.get('personal_code')
    name_cyrillic = user_data.get('name_cyrillic')
    name_translit = user_data.get('name_translit')
    pickup_point_code = user_data.get('pickup_point')
    logging.info(f'{pickup_point_code}')

    if contact_id:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
        instructions = {
            "pv_astana_1": (
                f"üôèüèª –°–ø–∞—Å–∏–±–æ, {name_cyrillic}!\n\n"
                f"üìå –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: AST{personal_code}\n\n"
                f"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n"
                f"1) ‰Ω≥‰∫∫AST{personal_code}\n"
                f"2) 18346727700\n"
                f"3) Âπø‰∏úÁúÅ ‰ΩõÂ±±Â∏Ç ‰∏πÁÅ∂Èïá\n"
                f"4) ÈáëÊ≤ôÈì∂Ê≤ôÂçóË∑Ø88Âè∑ (‰Ω≥‰∫∫AST{personal_code}_{name_translit}_ASTANA+ESIL)"
            ),
            "pv_karaganda_1": (
                f"üôèüèª –°–ø–∞—Å–∏–±–æ, {name_cyrillic}!\n\n"
                f"üìå –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: KRG{personal_code}\n\n"              
                f"üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n"
                f"1) ÊâçÂ≠êKRG{personal_code}\n"
                f"2) 18346727700\n"
                f"3) Âπø‰∏úÁúÅ ‰ΩõÂ±±Â∏Ç ÂçóÊµ∑Âå∫\n"
                f"4) ‰∏πÁÅ∂ÈïáÈáëÊ≤ôÈì∂Ê≤ôÂçóË∑Ø88Âè∑ (ÊâçÂ≠êKRG{personal_code}_{name_translit}_KRG+CENTR)"
            )
        }

        instruction_message = instructions.get(pickup_point_code, "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_message = await callback.message.answer(instruction_message, reply_markup=create_menu_button())

        try:
            # –ü–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_info = await callback.message.bot.get_chat(callback.message.chat.id)
            if chat_info.pinned_message:
                await callback.message.bot.unpin_all_chat_messages(chat_id=callback.message.chat.id)
            await callback.message.bot.pin_chat_message(chat_id=callback.message.chat.id,
                                                        message_id=sent_message.message_id)
            await state.clear()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    else:
        await callback.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()
