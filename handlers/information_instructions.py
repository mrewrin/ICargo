import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from db_management import get_client_by_chat_id
from bitrix_integration import get_latest_deal_info
from keyboards import create_menu_button


router = Router()


def register_instructions_handlers(router_object):
    router_object.callback_query.register(process_create_instructions, F.data.in_({"address_instructions"}))


@router.callback_query(F.data.in_({"address_instructions"}))
async def process_create_instructions(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    logging.info('process_create_instructions called')
    chat_id = callback.message.chat.id
    logging.info(f'{chat_id}')
    user_data = get_client_by_chat_id(chat_id)
    contact_id = user_data.get('contact_id')
    personal_code = user_data.get('personal_code')
    name_translit = user_data.get('name_translit')

    if contact_id:
        latest_deal = get_latest_deal_info(contact_id)
        logging.info(latest_deal)

        if latest_deal:
            pickup_code = latest_deal.get('UF_CRM_1723542922949', '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω')
            pickup_point = {
                "48": "PV_ASTANA_No1",
                "50": "PV_ASTANA_No2",
                "52": "PV_KARAGANDA_No1",
                "54": "PV_KARAGANDA_No2"
            }.get(pickup_code, "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")

            formatted_message = (
                f"üìå –í–∞—à –∫–æ–¥: ËÆ†AUG{personal_code}\n\n"
                f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n"
                f"1) ËÆ†AUG{personal_code}\n"
                f"2) 18957788787\n"
                f"3) ÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏Ç\n"
                f"4) Á¶èÁî∞Ë°óÈÅì ÈæôÂ≤óË∑Ø‰∏ÄË°ó6Âè∑ 8787Â∫ìÊàø\n"
                f"({personal_code}_{name_translit}_{pickup_point.upper()})\n\n"
                f"‚ùó 3 –ø—É–Ω–∫—Ç –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å.\n\n"
                f"üëá –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: —Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞\n"
            )
            sent_message = await callback.message.answer(formatted_message, reply_markup=create_menu_button())
            try:
                chat_info = await callback.message.bot.get_chat(callback.message.chat.id)
                if chat_info.pinned_message:
                    await callback.message.bot.unpin_all_chat_messages(chat_id=callback.message.chat.id)
                await callback.message.bot.pin_chat_message(chat_id=callback.message.chat.id,
                                                            message_id=sent_message.message_id)
                await state.clear()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–¥–µ–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
    else:
        await callback.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()
