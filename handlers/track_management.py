import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bitrix_integration import create_deal, get_deals_by_track, update_deal_contact
from db_management import get_client_by_chat_id, save_track_number
from keyboards import create_menu_button, create_track_keyboard
from states import Track, Menu
from handlers.utils import send_and_delete_previous


router = Router()


def register_track_management_handlers(router_object):
    router_object.message.register(process_track_number, Track.track_number)
    # router_object.message.register(process_track_unnamed, F.data == "track_no")
    # router_object.message.register(process_track_named, F.data == "track_yes")
    router_object.message.register(process_track_name_input, Track.track_name)


@router.message(Track.track_number)
async def process_track_number(message: Message, state: FSMContext):
    await message.delete()
    track_number = message.text.strip().upper()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
    await state.update_data(track_number=track_number)

    if not track_number.isalnum():
        await message.answer("–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä")
        return

    # # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    # if len(track_number) != 13:
    #     await send_and_delete_previous(message, "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 13 —Å–∏–º–≤–æ–ª–æ–≤. \n"
    #                                             "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä", state=state)
    #     return
    #

    # # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "AA" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "CN"
    # if not (track_number.startswith("AA") and track_number.endswith("CN")):
    #     await send_and_delete_previous(message,
    #                                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. "
    #                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å 'AA' –∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –Ω–∞ 'CN'.\n"
    #                                    "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
    #                                    state=state)
    #     return
    #
    # logging.info("–§–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")

    deals = get_deals_by_track(track_number)
    logging.info(f"–°–¥–µ–ª–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É: {deals}")

    if deals:
        last_deal = deals[0]
        deal_contact = last_deal.get('CONTACT_ID')
        chat_id = message.chat.id
        user_data = get_client_by_chat_id(chat_id)
        user_contact_id = user_data.get('contact_id')
        personal_code = user_data.get('personal_code')
        phone = user_data.get('phone')
        city = user_data.get('city')
        pickup_point = user_data.get('pickup_point')

        if deal_contact and deal_contact != user_contact_id:
            await message.answer(
                "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ "
                "–¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π "
                "—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
                reply_markup=create_menu_button()
            )
            return
        elif not deal_contact:
            logging.info(f"–°–¥–µ–ª–∫–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç.")
            update_result = update_deal_contact(last_deal['ID'], user_contact_id, personal_code, phone, city,
                                                pickup_point)

            if update_result:
                logging.info(f"–°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∫–æ–Ω—Ç–∞–∫—Ç {user_contact_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å–¥–µ–ª–∫–µ {last_deal['ID']}")
                await message.answer(
                    f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!",
                    reply_markup=create_menu_button()
                )
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {last_deal['ID']}")
                await message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            deal_status = last_deal.get('STAGE_ID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            status_code_list = {
                "C8:NEW": "–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É",
                "C8:PREPARATION": "–û—Ç–≥—Ä—É–∂–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞ –ö–∏—Ç–∞—è",
                "C8:PREPAYMENT_INVOICE": "–ü—Ä–∏–±—ã–ª –≤ –ê–ª–º–∞—Ç—É",
                "C4:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ1 –≥.–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
                "C6:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ2 –≥.–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
                "NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ1 –≥.–ê—Å—Ç–∞–Ω–∞",
                "C2:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ2 –≥.–ê—Å—Ç–∞–Ω–∞"
            }
            deal_status_text = status_code_list.get(deal_status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            last_modified = last_deal.get('DATE_MODIFY', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            last_modified = datetime.fromisoformat(last_modified)
            last_modified = last_modified.strftime("%H:%M %d.%m.%Y")
            logging.info(f"–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ. –°—Ç–∞—Ç—É—Å: {deal_status_text}, –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_modified}")

            await message.answer(
                f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É. –°—Ç–∞—Ç—É—Å: {deal_status_text}. "
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_modified}",
                reply_markup=create_menu_button()
            )
    else:
        chat_id = message.chat.id
        logging.info(chat_id)
        user_data = get_client_by_chat_id(chat_id)
        logging.info(user_data)
        contact_id = user_data.get('contact_id')
        personal_code = user_data.get('personal_code')
        pickup_point = user_data.get('pickup_point')
        phone = user_data.get('phone')

        if user_data:
            logging.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            deal_id = create_deal(contact_id, personal_code, track_number, pickup_point, phone, chat_id)

            if deal_id:
                logging.info(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {deal_id}")
                await message.answer(
                    f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
                )
                await state.set_state(Menu.main_menu)
            else:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")
                await message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    await send_and_delete_previous(
        message,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ (–¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏):",
        state=state
    )
    await state.set_state(Track.track_name)


# @router.callback_query(F.data == "track_no")
# async def process_track_unnamed(callback: CallbackQuery, state: FSMContext):
#     user_data = await state.get_data()
#     track_number = user_data.get('track_number')
#     track_name = track_number
#     chat_id = callback.message.chat.id
#     logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {track_name}")
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     save_track_number(track_number, track_name, chat_id)
#     await callback.message.answer(f'–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –∏—Å—Ö–æ–¥–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º {track_name}.\n'
#                                   f'–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ –º–µ–Ω—é '
#                                   f'"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫"', reply_markup=create_menu_button())
#     await state.clear()
#
#
# @router.callback_query(F.data == "track_yes")
# async def process_track_named(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞:")
#     await state.set_state(Track.track_name)


@router.message(Track.track_name)
async def process_track_name_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    track_number = user_data.get('track_number')
    track_name = message.text.strip()
    chat_id = message.chat.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞: {track_name}")

    save_track_number(track_number, track_name, chat_id)
    await message.answer(f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{track_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                         reply_markup=create_track_keyboard(track_data=[], update_name=track_number))
    await state.clear()
