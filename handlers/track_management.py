import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bitrix_integration import create_deal, get_deals_by_track, update_deal_contact, create_deal_with_stage, delete_deal
from db_management import get_client_by_chat_id, save_track_number, save_deal_to_db, get_track_from_db, save_deal_history
from keyboards import create_menu_button, create_track_added_keyboard
from states import Track, Menu
from handlers.utils import send_and_delete_previous


router = Router()


def register_track_management_handlers(router_object):
    router_object.message.register(process_track_number, Track.track_number)
    router_object.message.register(process_track_name_input, Track.track_name)


@router.message(Track.track_number)
async def process_track_number(message: Message, state: FSMContext):
    await send_and_delete_previous(message, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä...", state=state)
    track_number = message.text.strip().upper()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
    await state.update_data(track_number=track_number)

    if not track_number.isalnum():
        await send_and_delete_previous(
            message,
            "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
            state=state
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    existing_track = get_track_from_db(track_number)  # –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if existing_track:
        await send_and_delete_previous(
            message,
            f"‚ö†Ô∏è –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
            state=state
        )
        return

    deals = get_deals_by_track(track_number)
    logging.info(f"–°–¥–µ–ª–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É: {deals}")

    if deals:
        last_deal = deals[0]
        deal_contact = last_deal.get('CONTACT_ID')
        pipeline_stage = last_deal.get('STAGE_ID')
        category_id = int(last_deal.get('CATEGORY_ID'))

        chat_id = message.chat.id
        user_data = get_client_by_chat_id(chat_id)
        user_contact_id = str(user_data.get('contact_id'))
        personal_code = user_data.get('personal_code')
        name_translit = user_data.get('name_translit')
        phone = user_data.get('phone')
        city = user_data.get('city')
        pickup_point = user_data.get('pickup_point')

        logging.info(f'–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ —Å–¥–µ–ª–∫–∏ {deal_contact} —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–∑ –±–∞–∑—ã {user_contact_id}')
        if deal_contact and deal_contact != user_contact_id:
            await send_and_delete_previous(
                message,
                "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏, —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ "
                "–¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π "
                "—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
                state=state
            )
            return
        elif deal_contact == user_contact_id:
            logging.info(
                f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –Ω–∞ —ç—Ç–∞–ø–µ {pipeline_stage} –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É ID {last_deal['ID']}")
            new_deal_id = create_deal_with_stage(
                contact_id=user_contact_id,
                track_number=track_number,
                personal_code=personal_code,
                name_translit=name_translit,
                pickup_point=pickup_point,
                chat_id=chat_id,
                phone=phone,
                pipeline_stage=pipeline_stage,
                category_id=category_id
            )
            save_deal_history(
                deal_id=new_deal_id,
                track_number=track_number,
                original_date_modify=last_deal.get('DATE_MODIFY'),
                stage_id=last_deal.get('STAGE_ID')
            )

            if new_deal_id:
                logging.info(f"–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {new_deal_id}. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É ID {last_deal['ID']}")
                save_deal_to_db(
                    deal_id=new_deal_id,
                    contact_id=user_contact_id,
                    personal_code=personal_code,
                    track_number=track_number,
                    pickup_point=pickup_point,
                    phone=phone,
                    chat_id=chat_id
                )
                delete_result = delete_deal(last_deal['ID'])
                if delete_result:
                    logging.info(f"–°—Ç–∞—Ä–∞—è —Å–¥–µ–ª–∫–∞ —Å ID {last_deal['ID']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                    await send_and_delete_previous(
                        message,
                        f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                        reply_markup=create_menu_button(),
                        state=state
                    )
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π —Å–¥–µ–ª–∫–∏ ID {last_deal['ID']}")
                    await send_and_delete_previous(
                        message,
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        state=state
                    )
            else:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏.")
                await send_and_delete_previous(
                    message,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    state=state
                )
        elif not deal_contact:
            logging.info(f"–°–¥–µ–ª–∫–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç.")
            update_result = update_deal_contact(last_deal['ID'], user_contact_id, personal_code, name_translit, chat_id, phone, city,
                                                pickup_point)

            if update_result:
                logging.info(f"–°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∫–æ–Ω—Ç–∞–∫—Ç {user_contact_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å–¥–µ–ª–∫–µ {last_deal['ID']}")
                save_deal_to_db(
                    deal_id=last_deal['ID'],
                    contact_id=user_contact_id,
                    personal_code=personal_code,
                    track_number=track_number,
                    pickup_point=pickup_point,
                    phone=phone,
                    chat_id=chat_id
                )
                save_deal_history(
                    deal_id=last_deal['ID'],
                    track_number=track_number,
                    original_date_modify=last_deal.get('DATE_MODIFY'),
                    stage_id=last_deal.get('STAGE_ID')
                )
                await send_and_delete_previous(
                    message,
                    f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!",
                    reply_markup=create_menu_button(),
                    state=state
                )
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {last_deal['ID']}")
                await send_and_delete_previous(
                    message,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    state=state
                )
    else:
        chat_id = message.chat.id
        user_data = get_client_by_chat_id(chat_id)
        contact_id = user_data.get('contact_id')
        personal_code = user_data.get('personal_code')
        pickup_point = user_data.get('pickup_point')
        phone = user_data.get('phone')

        if user_data:
            deal_id = create_deal(contact_id, personal_code, track_number, pickup_point, phone, chat_id)
            if deal_id:
                save_deal_to_db(
                    deal_id=deal_id,
                    contact_id=contact_id,
                    personal_code=personal_code,
                    track_number=track_number,
                    pickup_point=pickup_point,
                    phone=phone,
                    chat_id=chat_id
                )
                await send_and_delete_previous(
                    message,
                    f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    state=state
                )
                await state.set_state(Menu.main_menu)
            else:
                await send_and_delete_previous(
                    message,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    state=state
                )
        else:
            await send_and_delete_previous(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                state=state
            )

    await send_and_delete_previous(
        message,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ (–¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏):",
        state=state
    )
    await state.set_state(Track.track_name)


@router.message(Track.track_name)
async def process_track_name_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    track_number = user_data.get('track_number')
    track_name = message.text.strip()
    chat_id = message.chat.id

    save_track_number(track_number, track_name, chat_id)
    await send_and_delete_previous(
        message,
        f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{track_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=create_track_added_keyboard(),
        state=state
    )
    await state.clear()
