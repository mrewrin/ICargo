import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from states import Track
from keyboards import create_inline_main_menu, create_support_keyboard
from handlers.utils import delete_previous_message, send_and_delete_previous

router = Router()


def register_menu_handlers(router_object):
    router_object.message.register(show_inline_menu, F.text == "üìã –ú–µ–Ω—é")
    router_object.callback_query.register(handle_inline_menu, F.data == "main_menu")
    router_object.message.register(handle_menu_command, Command("menu"))
    router_object.callback_query.register(handle_menu_actions, F.data.in_({"add_track"}))
    router_object.message.register(clear_chat_and_reset_state, Command("clear"))
    router_object.message.register(handle_all_text_messages, F.text)


async def show_inline_menu_action(message_or_callback, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: Message –∏–ª–∏ CallbackQuery
    if isinstance(message_or_callback, Message):
        await send_and_delete_previous(
            message=message_or_callback,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
            reply_markup=create_inline_main_menu(),
            state=state
        )
    elif isinstance(message_or_callback, CallbackQuery):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ `send_and_delete_previous`
        await send_and_delete_previous(
            message=message_or_callback.message,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
            reply_markup=create_inline_main_menu(),
            state=state
        )
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º CallbackQuery, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª "—á–∞—Å–∏–∫–∏"
        await message_or_callback.answer()
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è


@router.message(F.text == "üìã –ú–µ–Ω—é")
async def show_inline_menu(message: Message, state: FSMContext):
    logging.info("show_inline_menu called")
    await show_inline_menu_action(message, state)


@router.callback_query(F.data == "main_menu")
async def handle_inline_menu(callback: CallbackQuery, state: FSMContext):
    logging.info("handle_inline_menu called")
    await show_inline_menu_action(callback.message, state)


@router.message(Command("menu"))
async def handle_menu_command(message: Message, state: FSMContext):
    logging.info("handle_menu_command called")
    await show_inline_menu_action(message, state)


@router.callback_query(F.data.in_({"add_track"}))
async def handle_menu_actions(callback: CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message, state)
    action = callback.data
    if action == "add_track":
        logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
        await send_and_delete_previous(callback.message, "üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: ", state=state)
        await state.set_state(Track.track_number)


@router.message(Command("clear"))
async def clear_chat_and_reset_state(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_and_delete_previous(message, "–ß–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.", state=state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def handle_all_text_messages(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()
    if current_state:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥—ã
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (—Ç.–µ. –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await send_and_delete_previous(
        message,
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=create_support_keyboard(),
        state=state
    )
