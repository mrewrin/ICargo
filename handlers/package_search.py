import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from db_management import get_client_by_chat_id, get_track_numbers_by_chat_id, update_track_number
from bitrix_integration import get_deals_by_track
from keyboards import create_track_keyboard, create_menu_button
from states import Track

router = Router()


def register_package_search_handlers(router_object):
    router_object.callback_query.register(process_phone_search, F.data.in_({"find_package"}))
    router_object.callback_query.register(handle_track_status, lambda callback: callback.data.startswith("backtrack_"))
    router_object.callback_query.register(process_track_name_update, F.data.startswith("change_track_name_"))
    router_object.message.register(process_track_name_input, Track.track_name_update)


@router.callback_query(F.data.in_({"find_package"}))
async def process_phone_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chat_id = callback.message.chat.id
    logging.info(f'{chat_id}')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    user_data = get_client_by_chat_id(chat_id)
    phone = user_data.get('phone', None)
    logging.info(f'{phone}')

    if user_data:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        track_numbers = get_track_numbers_by_chat_id(chat_id)

        if track_numbers:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            track_number_list = [(track[0], track[1]) for track in track_numbers]
            await callback.message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}, \n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—ã–ª–∫–∏:",
                                          reply_markup=create_track_keyboard(track_number_list))
        else:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤.")
    else:
        await callback.message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()


@router.callback_query(lambda callback: callback.data.startswith("backtrack_"))
async def handle_track_status(callback: CallbackQuery, state: FSMContext):
    # await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    track_number = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    track_numbers = get_track_numbers_by_chat_id(callback.message.chat.id)
    track_number_data = next((track for track in track_numbers if track[0] == track_number), None)

    if track_number_data:
        # –ï—Å–ª–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        deals = get_deals_by_track(track_number)
        if deals:
            last_deal = deals[0]
            deal_status = last_deal.get('STAGE_ID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
            last_modified = last_deal.get('DATE_MODIFY', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            status_code_list = {
                "C8:NEW": "–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É",
                "C8:PREPARATION": "–û—Ç–≥—Ä—É–∂–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞ –ö–∏—Ç–∞—è",
                "C8:PREPAYMENT_INVOICE": "–ü—Ä–∏–±—ã–ª –≤ –ê–ª–º–∞—Ç—É",
                "C4:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ1 –≥.–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
                "C6:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ2 –≥.–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
                "NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ1 –≥.–ê—Å—Ç–∞–Ω–∞",
                "C2:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ2 –≥.–ê—Å—Ç–∞–Ω–∞"
            }
            deal_status_text = status_code_list.get(deal_status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if last_modified != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞':
                last_modified = datetime.fromisoformat(last_modified)
                last_modified = last_modified.strftime("%H:%M %d.%m.%Y")

            # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            track_numbers.remove(track_number_data)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            track_keyboard = create_track_keyboard([(track[0], track[1]) for track in track_numbers],
                                                   update_name=track_number)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(
                f"üì¶ –°—Ç–∞—Ç—É—Å –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É {track_number}: \n"
                f"–°—Ç–∞—Ç—É—Å: {deal_status_text}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_modified}",
                reply_markup=track_keyboard
            )
        else:
            await callback.message.answer(f"üì¶ –°–¥–µ–ª–∫–∏ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        await callback.message.answer(f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await callback.answer()


@router.callback_query(F.data.startswith("change_track_name_"))
async def process_track_name_update(callback: CallbackQuery, state: FSMContext):
    track_number = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(track_number=track_number)
    logging.info(track_number)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ {track_number}:")
    await state.set_state(Track.track_name_update)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
@router.message(Track.track_name_update)
async def process_track_name_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    track_number = user_data.get('track_number')
    track_name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    logging.info(track_name)
    chat_id = message.chat.id

    logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ {track_number} –Ω–∞ {track_name}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_track_number(track_number, track_name, chat_id)

    await message.answer(f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{track_name}'!",
                         reply_markup=create_menu_button())
    await state.clear()
