import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from db_management import get_client_by_chat_id, get_track_numbers_by_chat_id, update_track_number, \
    delete_deal_by_track_number, update_track_number_in_all_tables, get_name_track_by_track_number, \
    get_original_date_by_track
from bitrix_integration import get_deals_by_track, delete_deal, update_tracked_deal_in_bitrix, get_deal_info
from keyboards import create_track_keyboard, create_menu_button
from states import Track
from handlers.utils import send_and_delete_previous


router = Router()


def register_package_search_handlers(router_object):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫
    router_object.callback_query.register(process_phone_search, F.data.in_({"find_package"}))
    router_object.callback_query.register(handle_track_status, lambda callback: callback.data.startswith("backtrack_"))
    router_object.callback_query.register(manage_single_track, lambda callback: callback.data.startswith("manage_single_track_"))
    router_object.callback_query.register(process_track_name_update, F.data.startswith("change_track_name_"))
    router_object.message.register(process_track_name_input, Track.track_name_update)
    router_object.callback_query.register(process_track_number_edit, F.data.startswith("edit_track_"))
    router_object.message.register(process_track_number_input, Track.track_number_update)
    router_object.callback_query.register(process_delete_track, F.data.startswith("delete_track_"))


@router.callback_query(F.data.in_({"find_package"}))
async def process_phone_search(callback: CallbackQuery, state: FSMContext):
    await send_and_delete_previous(callback.message, "–ò—â–µ–º –≤–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏...", state=state)
    chat_id = callback.message.chat.id
    user_data = get_client_by_chat_id(chat_id)

    if user_data:
        track_numbers = get_track_numbers_by_chat_id(chat_id)

        if track_numbers:
            track_number_list = [(track[0], track[1]) for track in track_numbers]
            await send_and_delete_previous(
                callback.message,
                f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—ã–ª–∫–∏:",
                reply_markup=create_track_keyboard(track_number_list),
                state=state
            )
        else:
            await send_and_delete_previous(
                callback.message,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤.",
                reply_markup=create_menu_button(),
                state=state
            )
    else:
        await send_and_delete_previous(
            callback.message,
            "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            state=state
        )
    await state.clear()


@router.callback_query(lambda callback: callback.data.startswith("backtrack_"))
async def handle_track_status(callback: CallbackQuery, state: FSMContext):
    track_number = callback.data.split("_")[1]
    deals = get_deals_by_track(track_number)

    if deals:
        last_deal = deals[0]
        deal_status = last_deal.get('STAGE_ID', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        deal_history = get_original_date_by_track(track_number)
        if deal_history:
            last_modified, stage_id = deal_history
        else:
            last_modified = last_deal.get('DATE_MODIFY', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        status_code_list = {
            "C8:NEW": "–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É",
            "C8:PREPARATION": "–û—Ç–≥—Ä—É–∂–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞ –ö–∏—Ç–∞—è",
            "C8:PREPAYMENT_INVOICE": "–ü—Ä–∏–±—ã–ª –≤ –ê–ª–º–∞—Ç—É",
            "C4:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í‚Ññ1 –≥.–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
            "C6:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í –ê—Å—Ç–∞–Ω–∞ ESIL",
            "C2:NEW": "–ü—Ä–∏–±—ã–ª –≤ –ü–í –ê—Å—Ç–∞–Ω–∞ SARY-ARKA"
        }
        deal_status_text = status_code_list.get(deal_status, "–£–ø–∞–∫–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–¥–∞—á–∏")
        if last_modified != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞':
            last_modified = datetime.fromisoformat(last_modified).strftime("%H:%M %d.%m.%Y")
        name_track = get_name_track_by_track_number(track_number)
        deal_info = await get_deal_info(last_deal['ID'])
        if deal_info.get('UF_CRM_1729539412') == '1':
            track_numbers = deal_info.get('UF_CRM_1729115312')
            ready_track_numbers = [item.strip() for item in track_numbers.split(",") if item.strip()]

            ready_parcels_text = "\n".join(ready_track_numbers)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –≤ —Å—Ç–æ–ª–±–∏–∫

            alert_text = (
                f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—ã–ª–∫–µ:\n"
                f"–ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–¥–∞—á–µ –ø–æ—Å—ã–ª–∫–∏:\n"
                f"{ready_parcels_text}\n"  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
                f"–°—Ç–∞—Ç—É—Å: {deal_status_text}\n"
                f"{last_modified}"
            )
        else:
            alert_text = (
                f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—ã–ª–∫–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name_track}\n"
                f"–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: {track_number}\n"
                f"–°—Ç–∞—Ç—É—Å: {deal_status_text}\n"
                f"{last_modified}"
            )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫–æ–º
        keyboard = create_track_keyboard([(track_number, name_track)], update_name=track_number)
        await callback.answer(alert_text, show_alert=True)
        await callback.message.edit_text(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º:", reply_markup=keyboard)
    else:
        await callback.answer("üì¶ –°–¥–µ–ª–∫–∏ —Å —ç—Ç–∏–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)


@router.callback_query(lambda callback: callback.data.startswith("manage_single_track_"))
async def manage_single_track(callback: CallbackQuery, state: FSMContext):
    track_number = callback.data.split("_")[2]

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=f"change_track_name_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
            callback_data=f"edit_track_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä",
            callback_data=f"delete_track_{track_number}"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="find_package"
        ),
        width=1
    )

    await callback.message.edit_text(
        f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number}:",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("change_track_name_"))
async def process_track_name_update(callback: CallbackQuery, state: FSMContext):
    track_number = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(track_number=track_number)
    await send_and_delete_previous(callback.message, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ {track_number}:", state=state)
    await state.set_state(Track.track_name_update)


@router.message(Track.track_name_update)
async def process_track_name_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    track_number = user_data.get('track_number')
    track_name = message.text.strip()
    chat_id = message.chat.id

    update_track_number(track_number, track_name, chat_id)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üîç –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤",
            callback_data="find_package"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="üìã –ú–µ–Ω—é",
            callback_data="main_menu"
        ),
        width=1
    )

    await send_and_delete_previous(
        message,
        f"üìÑ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{track_name}'!",
        reply_markup=keyboard.as_markup(),
        state=state
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_track_"))
async def process_track_number_edit(callback: CallbackQuery, state: FSMContext):
    track_number = callback.data.split("_", maxsplit=2)[2]

    deals = get_deals_by_track(track_number)
    if deals:
        last_deal = deals[0]
        deal_status = last_deal.get('STAGE_ID', None)

        if deal_status == "C8:NEW":
            await state.update_data(track_number=track_number)
            await send_and_delete_previous(
                callback.message,
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è {track_number}:",
                state=state
            )
            await state.set_state(Track.track_number_update)
        else:
            await send_and_delete_previous(
                callback.message,
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –ö–∏—Ç–∞—è.",
                state=state
            )
    else:
        await send_and_delete_previous(
            callback.message,
            f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.",
            state=state
        )

    await callback.answer()


@router.message(Track.track_number_update)
async def process_track_number_input(message: Message, state: FSMContext):
    user_data = await state.get_data()
    old_track_number = user_data.get('track_number')
    new_track_number = message.text.strip().upper()
    chat_id = message.chat.id

    if not new_track_number.isalnum():
        await send_and_delete_previous(
            message,
            "‚ö†Ô∏è –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            state=state
        )
        return

    existing_deal = get_deals_by_track(new_track_number)
    if existing_deal:
        await send_and_delete_previous(
            message,
            f"‚ö†Ô∏è –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {new_track_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.",
            state=state
        )
        return

    try:
        update_track_number_in_all_tables(old_track_number, new_track_number, chat_id)
        update_tracked_deal_in_bitrix(old_track_number, new_track_number)
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            InlineKeyboardButton(
                text="üîç –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤",
                callback_data="find_package"
            ),
            width=1
        )
        keyboard.row(
            InlineKeyboardButton(
                text="üìã –ú–µ–Ω—é",
                callback_data="main_menu"
            ),
            width=1
        )
        await send_and_delete_previous(
            message,
            f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {old_track_number} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_track_number}.",
            reply_markup=keyboard.as_markup(),
            state=state
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞: {e}")
        await send_and_delete_previous(
            message,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            state=state
        )

    await state.clear()


@router.callback_query(F.data.startswith("delete_track_"))
async def process_delete_track(callback: CallbackQuery):
    track_number = callback.data.split("_", maxsplit=2)[2]

    deals = get_deals_by_track(track_number)
    if deals:
        last_deal = deals[0]
        deal_status = last_deal.get('STAGE_ID')
        deal_id = last_deal.get('ID')

        # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–¥–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ
        allowed_stages = [
            "C6:UC_VEHS4L", "C6:UC_874DXJ", "C6:WON", "C6:LOSE",
            "C2:UC_8EQX6X", "C2:WON", "C2:LOSE", "C8:NEW"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Å—Ç–∞–¥–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        if deal_status not in allowed_stages:
            await send_and_delete_previous(
                callback.message,
                f"‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–¥–µ–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—Ç–∞–¥–∏–∏.",
                state=None
            )
            return

        delete_result = delete_deal(deal_id)
        if not delete_result:
            await send_and_delete_previous(
                callback.message,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                state=None
            )
            return

    await delete_deal_by_track_number(track_number)
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üîç –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤",
            callback_data="find_package"
        ),
        width=1
    )
    keyboard.row(
        InlineKeyboardButton(
            text="üìã –ú–µ–Ω—é",
            callback_data="main_menu"
        ),
        width=1
    )

    await send_and_delete_previous(
        callback.message,
        f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
        reply_markup=keyboard.as_markup(),
        state=None
    )
    await callback.answer()
